
bin/Debug/charLCD.elf:     формат файла elf32-avr

Разделы:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000034a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080007a  0080007a  00000418  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001470  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000f9f  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000282b  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY
  8 .debug_info   000004e6  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004a3  00000000  00000000  00002d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  00003201  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000196  00000000  00000000  0000321b  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  8a:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <hd44780_outnibble>:
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
  CLR(PORT, HD44780_RW);
  92:	dc 98       	cbi	0x1b, 4	; 27
  if (rs)
  94:	66 23       	and	r22, r22
  96:	11 f0       	breq	.+4      	; 0x9c <hd44780_outnibble+0xa>
    SET(PORT, HD44780_RS);
  98:	de 9a       	sbi	0x1b, 6	; 27
  9a:	01 c0       	rjmp	.+2      	; 0x9e <hd44780_outnibble+0xc>
  else
    CLR(PORT, HD44780_RS);
  9c:	de 98       	cbi	0x1b, 6	; 27
  ASSIGN(PORT, HD44780_D4, n);
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	89 2b       	or	r24, r25
  a4:	8b bb       	out	0x1b, r24	; 27
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
  a6:	dd 9a       	sbi	0x1b, 5	; 27
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  else
    x = 0;
  CLR(PORT, HD44780_E);
  a8:	dd 98       	cbi	0x1b, 5	; 27
  aa:	08 95       	ret

000000ac <hd44780_innibble>:
static uint8_t
hd44780_innibble(uint8_t rs)
{
  uint8_t x;

  SET(PORT, HD44780_RW);
  ac:	dc 9a       	sbi	0x1b, 4	; 27
  ASSIGN(DDR, HD44780_D4, 0x00);
  ae:	9a b3       	in	r25, 0x1a	; 26
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	9a bb       	out	0x1a, r25	; 26
  if (rs)
  b4:	88 23       	and	r24, r24
  b6:	11 f0       	breq	.+4      	; 0xbc <hd44780_innibble+0x10>
    SET(PORT, HD44780_RS);
  b8:	de 9a       	sbi	0x1b, 6	; 27
  ba:	01 c0       	rjmp	.+2      	; 0xbe <hd44780_innibble+0x12>
  else
    CLR(PORT, HD44780_RS);
  bc:	de 98       	cbi	0x1b, 6	; 27
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
  be:	dd 9a       	sbi	0x1b, 5	; 27
   * back from the input pin is sampled close to the beginning of a
   * CPU clock cycle, while the previous edge on the output pin is
   * generated towards the end of a CPU clock cycle.
   */
  if (readback)
    __asm__ volatile("nop");
  c0:	00 00       	nop
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  c2:	89 b3       	in	r24, 0x19	; 25
  else
    x = 0;
  CLR(PORT, HD44780_E);
  c4:	dd 98       	cbi	0x1b, 5	; 27
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
  ASSIGN(DDR, HD44780_D4, 0x0F);
  c6:	9a b3       	in	r25, 0x1a	; 26
  c8:	9f 60       	ori	r25, 0x0F	; 15
  ca:	9a bb       	out	0x1a, r25	; 26
  CLR(PORT, HD44780_RW);
  cc:	dc 98       	cbi	0x1b, 4	; 27

  return x;
}
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	08 95       	ret

000000d2 <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	c8 2f       	mov	r28, r24
  d8:	d6 2f       	mov	r29, r22
  hd44780_outnibble(b >> 4, rs);
  da:	82 95       	swap	r24
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	0e 94 49 00 	call	0x92	; 0x92 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
  e2:	6d 2f       	mov	r22, r29
  e4:	8c 2f       	mov	r24, r28
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	0e 94 49 00 	call	0x92	; 0x92 <hd44780_outnibble>
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <hd44780_inbyte>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	c8 2f       	mov	r28, r24
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
  f8:	0e 94 56 00 	call	0xac	; 0xac <hd44780_innibble>
  fc:	d8 2f       	mov	r29, r24
  fe:	d2 95       	swap	r29
 100:	d0 7f       	andi	r29, 0xF0	; 240
  x |= hd44780_innibble(rs);
 102:	8c 2f       	mov	r24, r28
 104:	0e 94 56 00 	call	0xac	; 0xac <hd44780_innibble>

  return x;
}
 108:	8d 2b       	or	r24, r29
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <hd44780_wait_ready>:
 */
void
hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 79 00 	call	0xf2	; 0xf2 <hd44780_inbyte>
 116:	88 23       	and	r24, r24
 118:	dc f3       	brlt	.-10     	; 0x110 <hd44780_wait_ready>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
 11a:	08 95       	ret

0000011c <hd44780_init>:
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
  SET(DDR, HD44780_RS);
 11c:	d6 9a       	sbi	0x1a, 6	; 26
  SET(DDR, HD44780_RW);
 11e:	d4 9a       	sbi	0x1a, 4	; 26
  SET(DDR, HD44780_E);
 120:	d5 9a       	sbi	0x1a, 5	; 26
  ASSIGN(DDR, HD44780_D4, 0x0F);
 122:	8a b3       	in	r24, 0x1a	; 26
 124:	8f 60       	ori	r24, 0x0F	; 15
 126:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	85 ea       	ldi	r24, 0xA5	; 165
 12a:	9e e0       	ldi	r25, 0x0E	; 14
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <hd44780_init+0x10>
 130:	00 c0       	rjmp	.+0      	; 0x132 <hd44780_init+0x16>
 132:	00 00       	nop

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 49 00 	call	0x92	; 0x92 <hd44780_outnibble>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	94 e0       	ldi	r25, 0x04	; 4
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <hd44780_init+0x24>
 144:	00 c0       	rjmp	.+0      	; 0x146 <hd44780_init+0x2a>
 146:	00 00       	nop
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 49 00 	call	0x92	; 0x92 <hd44780_outnibble>
 150:	91 e2       	ldi	r25, 0x21	; 33
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <hd44780_init+0x36>
 156:	00 00       	nop
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 49 00 	call	0x92	; 0x92 <hd44780_outnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <hd44780_init+0x46>
 166:	00 00       	nop
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 49 00 	call	0x92	; 0x92 <hd44780_outnibble>
  hd44780_wait_ready(false);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>
  hd44780_wait_ready(false);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>
  hd44780_wait_ready(false);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>
 192:	08 95       	ret

00000194 <hd44780_powerdown>:
 * Prepare the LCD controller pins for powerdown.
 */
void
hd44780_powerdown(void)
{
  ASSIGN(PORT, HD44780_D4, 0);
 194:	8b b3       	in	r24, 0x1b	; 27
 196:	80 7f       	andi	r24, 0xF0	; 240
 198:	8b bb       	out	0x1b, r24	; 27
  CLR(PORT, HD44780_RS);
 19a:	de 98       	cbi	0x1b, 6	; 27
  CLR(PORT, HD44780_RW);
 19c:	dc 98       	cbi	0x1b, 4	; 27
  CLR(PORT, HD44780_E);
 19e:	dd 98       	cbi	0x1b, 5	; 27
 1a0:	08 95       	ret

000001a2 <lcd_init>:
 */
void
lcd_init(void)
{

  hd44780_init();
 1a2:	0e 94 8e 00 	call	0x11c	; 0x11c <hd44780_init>

  /*
   * Clear the display.
   */
  hd44780_outcmd(HD44780_CLR);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>
  hd44780_wait_ready(true);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>

  /*
   * Entry mode: auto-increment address counter, no display shift in
   * effect.
   */
  hd44780_outcmd(HD44780_ENTMODE(1, 0));
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>
  hd44780_wait_ready(false);
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>

  /*
   * Enable display, activate blinking cursor.
   */
  hd44780_outcmd(HD44780_DISPCTL(1, 1, 1));
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	8f e0       	ldi	r24, 0x0F	; 15
 1c6:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>
  hd44780_wait_ready(false);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>
 1d0:	08 95       	ret

000001d2 <lcd_putchar>:
 * Send character c to the LCD display.  After a '\n' has been seen,
 * the next character will first clear the display.
 */
int
lcd_putchar(char c, FILE *unused)
{
 1d2:	cf 93       	push	r28
 1d4:	c8 2f       	mov	r28, r24
  static bool nl_seen;

  if (nl_seen && c != '\n')
 1d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 1da:	88 23       	and	r24, r24
 1dc:	d1 f0       	breq	.+52     	; 0x212 <lcd_putchar+0x40>
 1de:	ca 30       	cpi	r28, 0x0A	; 10
 1e0:	d1 f0       	breq	.+52     	; 0x216 <lcd_putchar+0x44>
    {
      /*
       * First character after newline, clear display and home cursor.
       */
      hd44780_wait_ready(false);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_CLR);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>
      hd44780_wait_ready(false);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_HOME);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>
      hd44780_wait_ready(true);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_DDADDR(0));
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>

      nl_seen = false;
 20c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
 210:	06 c0       	rjmp	.+12     	; 0x21e <lcd_putchar+0x4c>
    }
  if (c == '\n')
 212:	ca 30       	cpi	r28, 0x0A	; 10
 214:	21 f4       	brne	.+8      	; 0x21e <lcd_putchar+0x4c>
    {
      nl_seen = true;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 21c:	07 c0       	rjmp	.+14     	; 0x22c <lcd_putchar+0x5a>
    }
  else
    {
      hd44780_wait_ready(false);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 88 00 	call	0x110	; 0x110 <hd44780_wait_ready>
      hd44780_outdata(c);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 69 00 	call	0xd2	; 0xd2 <hd44780_outbyte>
    }

  return 0;
}
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <main>:
#include "lcd.h"

FILE lcd_str = FDEV_SETUP_STREAM(lcd_putchar, NULL, _FDEV_SETUP_WRITE);
int main(void)
{
    lcd_init();
 234:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_init>
	stderr = &lcd_str;
 238:	80 e6       	ldi	r24, 0x60	; 96
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__iob+0x5>
 240:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__iob+0x4>
	fprintf(stderr, "HELLO AVR\n");
 244:	9c 01       	movw	r18, r24
 246:	4a e0       	ldi	r20, 0x0A	; 10
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	8e e6       	ldi	r24, 0x6E	; 110
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 38 01 	call	0x270	; 0x270 <fwrite>

	DDRB = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	87 bb       	out	0x17, r24	; 23
	while(1)
    {
        PORTB ^= 1;
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	88 b3       	in	r24, 0x18	; 24
 25e:	89 27       	eor	r24, r25
 260:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	e7 ea       	ldi	r30, 0xA7	; 167
 264:	f1 e6       	ldi	r31, 0x61	; 97
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x32>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x38>
 26c:	00 00       	nop
 26e:	f6 cf       	rjmp	.-20     	; 0x25c <main+0x28>

00000270 <fwrite>:
 270:	a0 e0       	ldi	r26, 0x00	; 0
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	ee e3       	ldi	r30, 0x3E	; 62
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__prologue_saves__+0xc>
 27c:	5b 01       	movw	r10, r22
 27e:	4a 01       	movw	r8, r20
 280:	79 01       	movw	r14, r18
 282:	d9 01       	movw	r26, r18
 284:	13 96       	adiw	r26, 0x03	; 3
 286:	2c 91       	ld	r18, X
 288:	21 ff       	sbrs	r18, 1
 28a:	1d c0       	rjmp	.+58     	; 0x2c6 <fwrite+0x56>
 28c:	c0 e0       	ldi	r28, 0x00	; 0
 28e:	d0 e0       	ldi	r29, 0x00	; 0
 290:	c8 15       	cp	r28, r8
 292:	d9 05       	cpc	r29, r9
 294:	d9 f0       	breq	.+54     	; 0x2cc <fwrite+0x5c>
 296:	8c 01       	movw	r16, r24
 298:	6c 01       	movw	r12, r24
 29a:	ca 0c       	add	r12, r10
 29c:	db 1c       	adc	r13, r11
 29e:	c8 01       	movw	r24, r16
 2a0:	0c 15       	cp	r16, r12
 2a2:	1d 05       	cpc	r17, r13
 2a4:	71 f0       	breq	.+28     	; 0x2c2 <fwrite+0x52>
 2a6:	0f 5f       	subi	r16, 0xFF	; 255
 2a8:	1f 4f       	sbci	r17, 0xFF	; 255
 2aa:	d7 01       	movw	r26, r14
 2ac:	18 96       	adiw	r26, 0x08	; 8
 2ae:	ed 91       	ld	r30, X+
 2b0:	fc 91       	ld	r31, X
 2b2:	19 97       	sbiw	r26, 0x09	; 9
 2b4:	b7 01       	movw	r22, r14
 2b6:	dc 01       	movw	r26, r24
 2b8:	8c 91       	ld	r24, X
 2ba:	09 95       	icall
 2bc:	89 2b       	or	r24, r25
 2be:	79 f3       	breq	.-34     	; 0x29e <fwrite+0x2e>
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <fwrite+0x5c>
 2c2:	21 96       	adiw	r28, 0x01	; 1
 2c4:	e5 cf       	rjmp	.-54     	; 0x290 <fwrite+0x20>
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <fwrite+0x5e>
 2cc:	ce 01       	movw	r24, r28
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	ec e0       	ldi	r30, 0x0C	; 12
 2d4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__epilogue_restores__+0xc>

000002d8 <__prologue_saves__>:
 2d8:	2f 92       	push	r2
 2da:	3f 92       	push	r3
 2dc:	4f 92       	push	r4
 2de:	5f 92       	push	r5
 2e0:	6f 92       	push	r6
 2e2:	7f 92       	push	r7
 2e4:	8f 92       	push	r8
 2e6:	9f 92       	push	r9
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	ca 1b       	sub	r28, r26
 302:	db 0b       	sbc	r29, r27
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	09 94       	ijmp

00000310 <__epilogue_restores__>:
 310:	2a 88       	ldd	r2, Y+18	; 0x12
 312:	39 88       	ldd	r3, Y+17	; 0x11
 314:	48 88       	ldd	r4, Y+16	; 0x10
 316:	5f 84       	ldd	r5, Y+15	; 0x0f
 318:	6e 84       	ldd	r6, Y+14	; 0x0e
 31a:	7d 84       	ldd	r7, Y+13	; 0x0d
 31c:	8c 84       	ldd	r8, Y+12	; 0x0c
 31e:	9b 84       	ldd	r9, Y+11	; 0x0b
 320:	aa 84       	ldd	r10, Y+10	; 0x0a
 322:	b9 84       	ldd	r11, Y+9	; 0x09
 324:	c8 84       	ldd	r12, Y+8	; 0x08
 326:	df 80       	ldd	r13, Y+7	; 0x07
 328:	ee 80       	ldd	r14, Y+6	; 0x06
 32a:	fd 80       	ldd	r15, Y+5	; 0x05
 32c:	0c 81       	ldd	r16, Y+4	; 0x04
 32e:	1b 81       	ldd	r17, Y+3	; 0x03
 330:	aa 81       	ldd	r26, Y+2	; 0x02
 332:	b9 81       	ldd	r27, Y+1	; 0x01
 334:	ce 0f       	add	r28, r30
 336:	d1 1d       	adc	r29, r1
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	ed 01       	movw	r28, r26
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
